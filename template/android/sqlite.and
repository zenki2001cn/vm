package //FIXME;

import android.app.Activity;

import android.os.Bundle;

import android.content.Context;
import android.content.ContentValues;

import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteException;
import android.database.Cursor;

import android.widget.ArrayAdapter;

import android.util.Log;

public class //FIXME {

    private static final String TAG = "";

    private static final String DATABASE_NAME = //FIXME;
    private static final String TABLE_NAME = //FIXME;
    private static final int DATABASE_VERSION = 1;
    private static final String KEY = //FIXME;

    private DatabaseHelper sqlOpenHelper;
    private SQLiteDatabase sqlDB;

    private static final String CREATE_DATABASE 
        = new String().format("CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s TEXT NOT NULL, %s TEXT);", 
                TABLE_NAME, KEY, TITLE, CONTENT); //FIXME
    private static final String DROP_DATABASE 
        = "DROP TABLE IF EXISTS " + TABLE_NAME;

    private class DatabaseHelper extends SQLiteOpenHelper {
        public DatabaseHelper(Context context, String name, CursorFactory factory, int version) {
            super(context, name, factory, version);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL(CREATE_DATABASE);
        }
        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL(DROP_DATABASE);
            onCreate(db);
        }
    }

    /*Constructor*/
    public //FIXME(Context context) {

        try {
            sqlOpenHelper 
                = new DatabaseHelper(context, DATABASE_NAME, null, DATABASE_VERSION);
            sqlDB = sqlOpenHelper.getWritableDatabase();
        }
        catch(Exception e) {
            Log.v(TAG, "exception " + e);
        }
    }

    /**
    * @brief  insert data to sqlite
    * @param  title note title
    * @param  content note content
    * @return void
    * @see      
    */
    public void insertData() {
        ContentValues values = new ContentValues();

        /*values.put(TITLE, title);FIXME*/
        /*values.put(CONTENT, content);FIXME*/

        try {
            sqlDB.insertOrThrow(TABLE_NAME, null, values);
        }
        catch(Exception e) {
            Log.v(TAG, " insertData " + e);
        }
    }

    /**
    * @brief  delete note from sqlite
    * @param  title note title
    * @return void
    * @see      
    */
    public boolean delData(String title) {
        int result = 0;

        try {
            /*result = sqlDB.delete(TABLE_NAME, TITLE + "='" + title + "'", null);FIXME*/
        }
        catch(Exception e) {
            Log.v(TAG, " delData " + e);
        }

        return result > 0;
    }

    /**
    * @brief  get data from sqlite
    * @param  title note title
    * @return the content about this note title
    * @see      
    */
    public String getData(String title) {
        /*String[] FROM = {TITLE, CONTENT};FIXME*/
        String content = new String();

        try {
            Cursor cursor 
                /*= sqlDB.query(TABLE_NAME, FROM, TITLE + "='" + title + "'", null, null, null, null, null); FIXME*/
            //startManagingCursor(cursor);

            cursor.moveToNext();
            /*content = cursor.getString(1); FIXME*/
        }
        catch(Exception e) {
            Log.v(TAG, " getData " + e);
        }

        return content;
    }

    /**
    * @brief  get all note content
    * @param  adapterTitle all note title in ArrayAdapter
    * @return void
    * @see      
    */
    public void getAllData(ArrayAdapter<String> adapterTitle) {
        /*String[] FROM = {TITLE, CONTENT};FIXME*/

        try {
            Cursor cursor 
                = sqlDB.query(TABLE_NAME, FROM, null, null, null, null, null, null);
            while ( cursor.moveToNext() ) {
                /*adapterTitle.add(cursor.getString(0));FIXME*/
            }
        }
        catch(Exception e) {
            Log.v(TAG, "getAllData err" + e);
        }
    }

    /**
    * @brief  close sqlite
    * @param  void void
    * @return void
    * @see      
    */
    public void closeNoteData() {
        try {
            sqlDB.close();
            sqlOpenHelper.close();
        }
        catch(Exception e) {
            Log.v(TAG, " closeData " + e);
        }
    }
}
