snippet ===
	/*
	 * =====================================================================================
	 *
	 *       Filename:  ${1:`expand('%:t')`}
	 *
	 *    Description:  ${2}
	 *
	 *        Version:  ${3}
	 *        Created:  `strftime("%B %d, %Y")`
	 *       Revision:  none
	 *
	 *         Author:  Zenki (Zenki.J.Zha), zenki2001cn@163.com
	 *   Organization:  
	 *
	 * =====================================================================================
	 */

## Access Modifiers
snippet po
	protected ${1}
snippet pu
	public ${1}
snippet pr
	private ${1}
snippet pufn
	public ${1:void} ${2:function}(${3}) {
		${4:/* code */}
	}
snippet pofn
	protected ${1:void} ${2:function}(${3}) {
		${4:/* code */}
	}
snippet prfn
	private ${1:void} ${2:function}(${3}) {
		${4:/* code */}
	}
## Basic Java packages and import
snippet imp
	import
## Class
snippet cl
	class ${1:`Filename("", "untitled")`} {
		${2}
	}
snippet pucl
	public class ${1:`Filename("", "untitled")`} {
		${2}
	} 
snippet pocl
	protected class ${1:`Filename("", "untitled")`} {
		${2}
	}
snippet in
	interface ${1:`Filename("", "untitled")`} {
		${2}
	}
snippet cle
	public class ${1:`Filename()`} extends ${2:TestCase}
##
## Class Enhancements
snippet ext
	extends 
snippet impl
	implements
## Constants
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
##
## Control Statements
snippet cs
	case ${1}:
		${2}
snippet def
	default:
		${2}
snippet el
	else {
		${1}
	}
snippet elif
	else if (${1}) {
		${2}
	}
snippet if
	if (${1}) {
		${2}
	}
snippet sw
	switch (${1}) {
		${2}
	}
## Create a Variable
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
##
## Enhancements to Methods, variables, classes, etc.
snippet ab
	abstract
snippet fi
	final
snippet st
	static
snippet sy
	synchronized
##
## Error Methods
snippet err
	System.err.print("${1:Message}");
snippet errf
	System.err.printf("${1:Message}", ${2:exception});
snippet errln
	System.err.println("${1:Message}");
##
## Exception Handling
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet thr
	throw
snippet ths
	throws
snippet try
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	}
snippet tryf
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}
## Find Methods
snippet findall
	List<${1:listName}> ${2:items} = ${1}.findAll();${3}
snippet findbyid
	${1:var} ${2:item} = ${1}.findById(${3});${4}
## Logger Methods
snippet log
	Log.${1:e}(${2:TAG}, "${3:message}");
## Loops
snippet fore
	for (${1:String} item : ${2:Items}) {
		${3}
	}
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
##
## Main method
snippet main
	public static void main (String[] args) {
		${1:/* code */}
	}
##
## Print Methods
snippet print
	System.out.print("${1:Message}");
snippet printf
	System.out.printf("${1:Message}", ${2:args});
snippet println
	System.out.println("${1:Message}");
##
## Setter and Getter Methods
snippet set
	${1:public} void set${3:}(${2:String} ${4:}){
		this.$4 = $4;
	}
snippet get
	${1:public} ${2:String} get${3:}(){
		return this.${4:};
	}
##
## Terminate Methods or Loops
snippet re
	return
snippet br
	break;
##
## Test Methods
snippet test
	@Test
	public void test${1:Name}() throws Exception {
		${2}
	}
snippet @or
	@Override
snippet @sw
	@SuppressWarnings
snippet thread
	Thread ${1:thread} = new Thread() {
		public void run() {
			${2:/* code here */}
		};
	};
snippet runnable
	new Runnable() {
		public void run() {
			${1:/* code here */}
		}
	}
snippet thread_run
	Thread ${1:thread} = new Thread(new Runnable() {
		public void run() {
			${2:/* code here */}
		}
	}, "${3:thread_name}");
snippet sleep
	try {
		Thread.sleep(${1:1000});
	} catch (InterruptedException e) {
		e.printStackTrace();
	}
