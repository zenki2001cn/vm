*choowsewin.txt* land to window you choose like tmux's 'display-pane'.

Version: 0.8
Author : t9md <taqumd@gmail.com>
GitHub : https://github.com/t9md/vim-choowsewin
==============================================================================
CONTENTS					*choowsewin-contents*

Introduction				    |choowsewin-introduction|
Mapping					    |choowsewin-mapping|
Commands				    |choowsewin-commands|
Variables				    |choowsewin-variables|
Functions				    |choowsewin-functions|
Configuration Example			    |choowsewin-example|
Bug					    |choowsewin-bug|
Todo					    |choowsewin-todo|
Changelog				    |choowsewin-changelog|

==============================================================================
INTRODUCTION					*choowsewin-introduction*

Land to window you choose~

Aiming to mimic tmux's `display-pane` feature, which enables you to choose
window interactively.

This plugin should be useful especially when you are working on high
resolution wide display.
Since with wide display, you are likely to open multiple window and
moving around window is a little bit tiresome.

This plugin make window excursion simplify.

	1. display window label on statusbar
	2. read input from user
	3. you can land window you choose

==============================================================================
MAPPINGS					*choowsewin-mappings*

<Plug>(choosewin)

==============================================================================
COMMANDS						*choowsewin-commands*

*:ChooseWin*

==============================================================================
VARIABLES						*choowsewin-variables*

*g:choosewin_active*
	Default: 0
	Type:    |Number|
	Become active while choosewin is activated, for use in &statusline

*g:choosewin_statusline_replace*
	Default: 1
	Type: Number

*g:choosewin_color_label*
	Default: See plugin/choosewin.vim
	Type: |Dictionary|

	Set color with collowing fomrat.
	{
	  'gui': [ {guibg}, {guifg}, {gui} ],
	  'cterm': [ {ctermbg}, {ctermfg}, {cterm}]
	}

	You can omit unused color, means if you use vim only GUI, you don't
	need to configure 'cterm' field.
	And if you want set {guifg} but not {guibg}, use empty string('') like
>
	let g:choosewin_color_label = { 'gui': ['', 'white'] }
<

	Exeample~
>
	let g:choosewin_color_label = {
	      \ 'gui': ['ForestGreen', 'white', 'bold'],
	      \ 'cterm': [ 9, 16]
	      \ }
	let g:choosewin_color_other = {
	      \ 'gui': ['gray20', 'black'],
	      \ 'cterm': [ 240, 0]
	      \ }
<

*g:choosewin_color_overlay*
	color of overlay window caption
*g:choosewin_color_overlay_current*
	color of overlay window caption for current window
*g:choosewin_color_shade*
	color of shade
*g:choosewin_color_label_current*
	color of label for current win/tab
*g:choosewin_color_other*
	color of around-label win/tab
*g:choosewin_color_land*
	Used to blink cursor word when landing to window.

*g:choosewin_blink_on_land*
	Default: 1
	Type: |Number| 0 or 1
	Control whether blinking cursor word when landing window.
	Set 0 to disable blinking.

*g:choosewin_label*
	Default: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	Type: |String|

	[CAUNTION] You need to manage to avoid conflict to
	|g:choosewin_tablabel| or you can't choose label you want.

	[NOTE] choosewin ignore case you input so that you don't need to
	press Shift. This is for show label with upper case to standout and
	choose label with minimal key stroke.

	Exeample~
>
	let g:choosewin_label = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
<
*g:choosewin_tablabel*
	Default: '1234567890[]$'
	Type: |String|
	[CAUNTION] You need to manage to avoid conflict to
	|g:choosewin_label| or you can't choose label you want.

	[NOTE] LAST 4 CHALACTER is used for SPECIAL PURPOSE
	With default value, last four chars are used like below.

		0 => choose FIRST    tab
		[ => choose PREVIOUS tab
		] => choose NEXT     tab
		$ => choose LAST     tab

	So keep in mind that you must set at least 4 chars to this variable.

	[NOTE] choosewin ignore case you input so that you don't need to
	press Shift. This is for show label with upper case to standout and
	choose label with minimal key stroke.

*g:choosewin_label_align*
	Default: 'center'
	One of 'right', 'center', 'left'

*g:choosewin_label_padding*
	Default: 3
	Type: |Number|
	Controll padding concatanated around window label.

*g:choosewin_label_fill*
	Default: 0
	Type: |Number|
	Set 1 to fill statusline

*g:choosewin_return_on_single_win*
	Default: 0
	Type: |Number|
	Set 1 to return immediately when number of window is 1.

*g:choosewin_overlay_enable*
	Default: 0
	Type: |Number|
	Enable experimental overlay window caption.

	[CAUTION] Very very experimental state.
	Don't use in important buffer.

	Limintaion~
	Not work properly in following situation.
		- buffer includes multibyte characters.
		- buffer includes |concealed| character.
		- buffer includes |fold|.
		- buffer is |wrap|ed.

	Some of them could be improved if I work hard but I believe I coudn't
	overcome limitation completely.

	How It works~
	Purpose of this section is make you understand tread off of overlay.
		Good: Easy to spot window label than it on |&statusline|.
		Bad: Too aggressive for merely show caption.

	What 'too agressive' means,
		- change buffer temporarily
			Substitute tab to space and append space to each line
			of caption is rendered.
			Append empty line to EOF.
		- Then highlight caption font with matchadd()
		- when reverting undo all changes.
		
	Not work properly in following situation.
		- buffer includes multibyte characters.
		- buffer includes |concealed| character.

*g:choosewin_overlay_shade*
	Default: 0
	Type: |Number|
	Enable shade where overlay window caption is rendered.

==============================================================================
FUNCTIONS						*choowsewin-functions*

							   *choosewin#start()*
choosewin#start({winnum-list},[ {auto-choose}, {label-string}] )
	Return: |List|
	Value: 
		choosed:  [ tabpagenr(), winnr() ]
		canceled: []

	{winnum-list}:  Required
		|List| of window number.
	{auto-choose}: Optional
		Type: |Number|
		Value: 0 or 1
		Set 1 to automatically choose win if number of window is 1

	{label-string}: Optional
		Sequence of character used for label.
		Must longer than {winnum-list}

	Exeample: show label for specific window~
>
	" win3 => d, win4 => e, char 'f' is silently ignored.
	call choosewin#start([3,4], 'def')
<
==============================================================================
CONFIGURATION EXAMPLE				    *choowsewin-example*
>
	nmap  -  <Plug>(choosewin)
<
==============================================================================
BUG							    *choowsewin-bug*

* Number of window exceed passed win label cause error, especially likely to
 face this situation when you manually pass labelstr using choosewin#start()

==============================================================================
TODO							    *choowsewin-todo*

[ ] disable &wrap and &lcs-trail ? adviced by manga-osyo
[ ] [newfeature] close tab with key 'x'.
[ ] FIX API-specification
[ ] Distinguish original tab so that user never lost while traveling tab.

==============================================================================
CHANGELOG						*choowsewin-changelog*

2014-01-06:
	- [bugfix] Number of tab exceed length of |g:choosewin_tablabel| cause
	  error.
	- [bugfix] Experimental overlay caption break redo history.
	  now, keep undolist with |:rundo|, |:rundo|.
2014-01-03:
	- [improve] cleanup highlight management.
	- [new] add experimental overlay window caption.
2013-12-31:
	- [bugfixed] Number of tab exceed length of |g:choosewin_tablabel|
	  cause error.
	- [new-feature] last four char for |g:choosewin_tablabel|is used for
	  special tab excursion.
	- [bugfix] choosing tab and <Esc> don't revert original tab.
2013-12-29:
	- now blinking cursor word at land so that easy to spot cursor.
	- [api-change] add auto-choose optional args for choowsewin#start()
	  suggested by hrsh7th
2013-12-28: v0.8
	- now can choose tab inspired number of advice by manga-osyo
2013-12-28: v0.6
	- cleanup
	- now independent from &statusline plugin( such as ezbar )
2013-12-21: v0.1
	- initial release

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
